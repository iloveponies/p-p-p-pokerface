(rank "5h")
(p-p-p-pokerface/rank)
(defn rank [card]
  (let [[fst _] card]
    (str fst)))
(rank "5H")
(rank "JH")
(use 'src/p-p-p-pokerface)
(use 'src/p_p_p_pokerface)
(rank)
rank
(load-file "src/p_p_p_pokerface.clj")
(use 'src/p-p-p-pokerface)
(p-p-p-pokerface/rank)
(p-p-p-pokerface/rank "5H")
(Integer/valueOf 22)
(def replacements {A 14 K 13 Q 12})
(def replacements {\A 14 \K 13 \Q 12})
(p-p-p-pokerface/rank "5H")
(p-p-p-pokerface/rank "AH")
(p-p-p-pokerface/rank "5H")
(p-p-p-pokerface/rank "KH")
(Integer/ValueOf 1)
(Integer/ValueOf \1)
(Integer/valueOf \1)
(Integer/valueOf 1)
(Integer/valueOf "1")
(Integer/valueOf \1)
(Integer/valueOf "1")
(contains? '(2 3) 2)
(contains? [2 3] 2)
(contains? 2 [2 3])
(max [1 2 3])
(apply max [1 2 3])
(> 0 1)
(> 1 2)
(> 1 0)
(get '(1 2 3) 0)
(first '(1 2 3))
(range 1 5)
(range 1 (+ 1 5))
(int 1)
