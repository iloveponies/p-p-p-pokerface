(defn suit [[[_ snd] card]] 
snd)
(suit "5H")
(defn suit [card]
(let [[_ suit] card]
suit)
)
(suit "5H")
clear
(Integer/valueOf "12")
(let [[r _] "5H"]
r)
(let [[r _] "5H"] r)
(let [[r _] "5H"] (Character/isDigit r))
(let [[r _] "5H"] (Integer/valueOf r))
(Integer/valueOf "12")
(def high-seven                   ["2H" "3S" "4C" "5C" "7D"])
(def pair-hand                    ["2H" "2S" "4C" "5C" "7D"])
(def two-pairs-hand               ["2H" "2S" "4C" "4D" "7D"])
(def three-of-a-kind-hand         ["2H" "2S" "2C" "4D" "7D"])
(def four-of-a-kind-hand          ["2H" "2S" "2C" "2D" "7D"])
(def straight-hand                ["2H" "3S" "6C" "5D" "4D"])
(def low-ace-straight-hand        ["2H" "3S" "4C" "5D" "AD"])
(def high-ace-straight-hand       ["TH" "AS" "QC" "KD" "JD"])
(def flush-hand                   ["2H" "4H" "5H" "9H" "7H"])
(def full-house-hand              ["2H" "5D" "2D" "2C" "5S"])
(def straight-flush-hand          ["2H" "3H" "6H" "5H" "4H"])
(def low-ace-straight-flush-hand  ["2D" "3D" "4D" "5D" "AD"])
(def high-ace-straight-flush-hand ["TS" "AS" "QS" "KS" "JS"])
(defn rank [card]
  (let [[r _] card
        ranks {\T 10, \J 11, \Q 12, \K 13, \A 14}]
    (if (Character/isDigit r)
      (Integer/valueOf (str r))
      (ranks r))))
(defn suit [card]
  (let [[_ s] card]
    (str s)))
pair-hand
(apply rank pair-hand)
(map rank pair-hand)
(frequencies (map rank pair-hand))
(vals (frequencies (map rank pair-hand)))
(contains? (vals (frequencies (map rank pair-hand))) 2)
(doc contains?)
(contains? (vals (frequencies (map rank pair-hand))) 2)
(vals (frequencies (map rank pair-hand)))
(set (vals (frequencies (map rank pair-hand))))
(contains? (set (vals (frequencies (map rank pair-hand)))) 2)
(map suit pair-hand)
(map suit flush-hand)
(frequencies (map suit flush-hand))
(vals (frequencies (map suit flush-hand)))
(contains? (vals (frequencies (map suit flush-hand))) 5)
(contains? (set (vals (frequencies (map suit flush-hand)))) 5)
(= [3 4 5 6 7] (range 3 8)))
(= [3 4 5 6 7] (range 3 8))
(= (3 2) (2 3))
(= (seq [3 2]) (seq [2 3]))
(= (seq [3 2]) (seq [3 2]))
(frequencies (map suit flush-hand))
(frequencies (map rank flush-hand))
(frequencies flush-hand)
(frequencies full-house-hand)
(frequencies (map rank flush-hand))
(vals (frequencies (map rank flush-hand)))
(vals (frequencies (map rank full-house-hand)))
(sorted (vals (frequencies (map rank full-house-hand))))
(sort (vals (frequencies (map rank full-house-hand))))
(= (sort (vals (frequencies (map rank full-house-hand)))) (range 2 4))
(= (sort (vals (frequencies (map rank full-house-hand)))) (seq [2 2]))
(= (sort (vals (frequencies (map rank two-pair-hand)))) (seq [2 2]))
(= (sort (vals (frequencies (map rank two-pairs-hand)))) (seq [2 2]))
(= (sort (vals (frequencies (map rank two-pairs-hand)))) (seq [2 2 1]))
(= (sort (vals (frequencies (map rank two-pairs-hand)))) (seq [1 2 2]))
(sort (vals (frequencies (map rank two-pairs-hand))))
(sort (vals (map rank two-pairs-hand)))
(map rank two-pairs-hand)
(sort (map rank two-pairs-hand))
(sort (map rank straight-hand))
(let [sorted-hand (sort (map rank straight-hand))]
(= sorted-hand (range (apply min sorted-hand) 
(sort (map rank straight-hand))
(apply min (sort (map rank straight-hand)))
low-ace-straight-
low-ace-straight-hand
(map rank low-ace-straight-hand)
(replace {14 1} (map rank low-ace-straight-hand))
(sort (replace {14 1} (map rank low-ace-straight-hand)))
(doc cond)
